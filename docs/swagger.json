{
    "swagger": "2.0",
    "info": {
        "description": "API for the Codular project, providing functionality to generate code skips, retrieve tasks, and check task status.",
        "title": "Codular API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8082",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user with email and password, returning access token and setting refresh token in a secure cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or empty body",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Invalidates the refresh token by clearing the secure cookie and removing it from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Missing refresh token cookie",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the access token using a valid refresh token provided in a secure cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Missing refresh token cookie",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with email and password, returning access token and setting refresh token in a secure cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User email and password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or empty body",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    }
                }
            }
        },
        "/noises/generate": {
            "post": {
                "description": "Processes the provided source code with a specified level of noise, generates a unique alias, and saves it to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Noise"
                ],
                "summary": "Generate and save noise for code",
                "parameters": [
                    {
                        "description": "Source code and level of noise",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/noises.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated and saved noise",
                        "schema": {
                            "$ref": "#/definitions/noises.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or empty body",
                        "schema": {
                            "$ref": "#/definitions/noises.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/noises.Response"
                        }
                    }
                }
            }
        },
        "/skips/generate": {
            "post": {
                "description": "Processes the provided source code with a specified number of skips, generates a unique alias, and saves initial status to Redis. Returns the task alias for status checking.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skips"
                ],
                "summary": "Generate and save skips for code",
                "parameters": [
                    {
                        "description": "Source code, number of skips, and programming language",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/skips.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response\" Example({\"responseInfo\":{\"status\":\"OK\"},\"taskAlias\":\"abc123\"})",
                        "schema": {
                            "$ref": "#/definitions/skips.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or empty body",
                        "schema": {
                            "$ref": "#/definitions/skips.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/skips.Response"
                        }
                    }
                }
            }
        },
        "/skips/solve": {
            "post": {
                "description": "Receives user answers for a given task alias, saves the submission, and asynchronously processes it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skips"
                ],
                "summary": "Submit answers for a skips task",
                "parameters": [
                    {
                        "description": "Task alias and user's answers",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/skips_check.ClientRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response for successful submission\" Example({\"responseInfo\":{\"status\":\"OK\"},\"submissionId\":123})",
                        "schema": {
                            "$ref": "#/definitions/skips_check.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/skips_check.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/skips_check.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/skips_check.ServerResponse"
                        }
                    }
                }
            }
        },
        "/submission-status/{submission_id}": {
            "get": {
                "description": "Returns the current status of a submission by its ID, including any hints if available.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get submission status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Submission ID",
                        "name": "submission_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response for failure with hints\" Example({\"responseInfo\":{\"status\":\"OK\"},\"IsCorrect\":\"Failed\",\"hints\":[\"1'th skip: Hint message 1\",\"3'th skip: Hint message 2\"]})",
                        "schema": {
                            "$ref": "#/definitions/submission_status.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID format",
                        "schema": {
                            "$ref": "#/definitions/submission_status.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "schema": {
                            "$ref": "#/definitions/submission_status.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/submission_status.ServerResponse"
                        }
                    }
                }
            }
        },
        "/task-status/{alias}": {
            "get": {
                "description": "Returns the current status of a task by its alias.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Skips"
                ],
                "summary": "Get task status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task alias",
                        "name": "alias",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response\" Example({\"status\":\"Done\",\"result\":\"processed code\"})",
                        "schema": {
                            "$ref": "#/definitions/task_status.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Alias parameter is missing",
                        "schema": {
                            "$ref": "#/definitions/task_status.StatusResponse"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/task_status.StatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/task_status.StatusResponse"
                        }
                    }
                }
            }
        },
        "/task/{alias}": {
            "get": {
                "description": "Retrieves the processed code associated with the given alias from the database, including whether the user can edit the task.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get task by alias",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task alias",
                        "name": "alias",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response\" Example({\"responseInfo\":{\"status\":\"OK\"},\"codeToSolve\":\"processed code\",\"canEdit\":true})",
                        "schema": {
                            "$ref": "#/definitions/get_task.Response"
                        }
                    },
                    "400": {
                        "description": "Task alias is empty",
                        "schema": {
                            "$ref": "#/definitions/get_task.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/get_task.Response"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/get_task.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/get_task.Response"
                        }
                    }
                }
            }
        },
        "/task/{alias}/regenerate": {
            "patch": {
                "description": "Regenerates the task associated with the given alias, updating its code and answers based on the task type (skips or noises). Requires user authorization and edit permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Regenerate task by alias",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task alias",
                        "name": "alias",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Optional skips number or noise level",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/regenerate.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example response\" Example({\"responseInfo\":{\"status\":\"OK\"},\"taskAlias\":\"abc123\"})",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or task alias is empty",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden: user does not have edit permissions",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/regenerate.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "get_task.Response": {
            "type": "object",
            "properties": {
                "canEdit": {
                    "type": "boolean"
                },
                "codeToSolve": {
                    "type": "string"
                },
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                }
            }
        },
        "noises.Request": {
            "type": "object",
            "required": [
                "noiseLevel",
                "programmingLanguage",
                "sourceCode"
            ],
            "properties": {
                "noiseLevel": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 0
                },
                "programmingLanguage": {
                    "type": "string"
                },
                "sourceCode": {
                    "type": "string"
                }
            }
        },
        "noises.Response": {
            "type": "object",
            "properties": {
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                },
                "taskAlias": {
                    "type": "string"
                }
            }
        },
        "regenerate.Request": {
            "type": "object",
            "properties": {
                "noiseLevel": {
                    "type": "integer",
                    "maximum": 10,
                    "minimum": 0
                },
                "skipsNumber": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "regenerate.Response": {
            "type": "object",
            "properties": {
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                },
                "taskAlias": {
                    "type": "string"
                }
            }
        },
        "response_info.ResponseInfo": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "skips.Request": {
            "type": "object",
            "required": [
                "programmingLanguage",
                "skipsNumber",
                "sourceCode"
            ],
            "properties": {
                "programmingLanguage": {
                    "type": "string"
                },
                "skipsNumber": {
                    "type": "integer",
                    "minimum": 0
                },
                "sourceCode": {
                    "type": "string"
                }
            }
        },
        "skips.Response": {
            "type": "object",
            "properties": {
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                },
                "taskAlias": {
                    "type": "string"
                }
            }
        },
        "skips_check.ClientRequest": {
            "type": "object",
            "required": [
                "answers",
                "taskAlias"
            ],
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskAlias": {
                    "type": "string"
                }
            }
        },
        "skips_check.ServerResponse": {
            "type": "object",
            "properties": {
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                },
                "submissionId": {
                    "type": "integer"
                }
            }
        },
        "submission_status.ServerResponse": {
            "type": "object",
            "properties": {
                "IsCorrect": {
                    "type": "string"
                },
                "hints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responseInfo": {
                    "$ref": "#/definitions/response_info.ResponseInfo"
                }
            }
        },
        "task_status.StatusResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "result": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}