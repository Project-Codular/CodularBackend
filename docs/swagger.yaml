basePath: /api/v1
definitions:
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  edit_task.SetPublicRequest:
    properties:
      public:
        type: boolean
    required:
    - public
    type: object
  edit_task.SetPublicResponse:
    properties:
      response_info:
        $ref: '#/definitions/response_info.ResponseInfo'
      taskAlias:
        type: string
    type: object
  get_task.Response:
    properties:
      canEdit:
        type: boolean
      codeToSolve:
        type: string
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
    type: object
  noises.Request:
    properties:
      noiseLevel:
        maximum: 100
        minimum: 0
        type: integer
      programmingLanguage:
        type: string
      sourceCode:
        type: string
    required:
    - noiseLevel
    - programmingLanguage
    - sourceCode
    type: object
  noises.Response:
    properties:
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      taskAlias:
        type: string
    type: object
  noises_check.ClientRequest:
    properties:
      answer:
        type: string
      taskAlias:
        type: string
    required:
    - answer
    - taskAlias
    type: object
  noises_check.ServerResponse:
    properties:
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      submissionId:
        type: integer
    type: object
  regenerate.Request:
    properties:
      noiseLevel:
        maximum: 10
        minimum: 0
        type: integer
      skipsNumber:
        minimum: 0
        type: integer
    type: object
  regenerate.Response:
    properties:
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      taskAlias:
        type: string
    type: object
  response_info.ResponseInfo:
    properties:
      error:
        type: string
      status:
        type: string
    type: object
  skips.Request:
    properties:
      programmingLanguage:
        type: string
      skipsNumber:
        minimum: 0
        type: integer
      sourceCode:
        type: string
    required:
    - programmingLanguage
    - skipsNumber
    - sourceCode
    type: object
  skips.Response:
    properties:
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      taskAlias:
        type: string
    type: object
  skips_check.ClientRequest:
    properties:
      answers:
        items:
          type: string
        type: array
      taskAlias:
        type: string
    required:
    - answers
    - taskAlias
    type: object
  skips_check.ServerResponse:
    properties:
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      submissionId:
        type: integer
    type: object
  submission_status.ServerResponse:
    properties:
      hints:
        items:
          type: string
        type: array
      isCorrect:
        type: string
      responseInfo:
        $ref: '#/definitions/response_info.ResponseInfo'
      score:
        type: integer
    type: object
  task_status.StatusResponse:
    properties:
      error:
        type: string
      message:
        type: string
      result:
        type: string
      status:
        type: string
    type: object
host: api.codular.ru
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for the Codular project, providing functionality to generate code
    skips, retrieve tasks, and check task status.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Codular API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password, returning access
        token and setting refresh token in a secure cookie.
      parameters:
      - description: User email and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid request or empty body
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.AuthResponse'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      description: Invalidates the refresh token by clearing the secure cookie and
        removing it from the database.
      produces:
      - application/json
      responses:
        "200":
          description: User logged out successfully
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Missing refresh token cookie
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.AuthResponse'
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Refreshes the access token using a valid refresh token provided
        in a secure cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Missing refresh token cookie
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.AuthResponse'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password, returning access
        token and setting refresh token in a secure cookie.
      parameters:
      - description: User email and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Invalid request or empty body
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/auth.AuthResponse'
      summary: Register a new user
      tags:
      - Auth
  /noises/generate:
    post:
      consumes:
      - application/json
      description: Processes the provided source code with a specified level of noise,
        generates a unique alias, and saves it to the database.
      parameters:
      - description: Source code and level of noise
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/noises.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated and saved noise
          schema:
            $ref: '#/definitions/noises.Response'
        "400":
          description: Invalid request or empty body
          schema:
            $ref: '#/definitions/noises.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/noises.Response'
      summary: Generate and save noise for code
      tags:
      - Noises
  /noises/solve:
    post:
      consumes:
      - application/json
      description: Submits a user's answer for a noises task identified by its alias,
        saves the submission, and processes it asynchronously. Returns a submission
        ID for status tracking.
      parameters:
      - description: Task alias and user answer
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/noises_check.ClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"responseInfo":{"status":"OK"},"submissionId":123})
          schema:
            $ref: '#/definitions/noises_check.ServerResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/noises_check.ServerResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/noises_check.ServerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/noises_check.ServerResponse'
      summary: Submit answer for a noises task
      tags:
      - Noises
  /skips/generate:
    post:
      consumes:
      - application/json
      description: Processes the provided source code with a specified number of skips,
        generates a unique alias, and saves initial status to Redis. Returns the task
        alias for status checking.
      parameters:
      - description: Source code, number of skips, and programming language
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/skips.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"responseInfo":{"status":"OK"},"taskAlias":"abc123"})
          schema:
            $ref: '#/definitions/skips.Response'
        "400":
          description: Invalid request or empty body
          schema:
            $ref: '#/definitions/skips.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/skips.Response'
      summary: Generate and save skips for code
      tags:
      - Skips
  /skips/solve:
    post:
      consumes:
      - application/json
      description: Receives user answers for a given task alias, saves the submission,
        and asynchronously processes it.
      parameters:
      - description: Task alias and user's answers
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/skips_check.ClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example response for successful submission" Example({"responseInfo":{"status":"OK"},"submissionId":123})
          schema:
            $ref: '#/definitions/skips_check.ServerResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/skips_check.ServerResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/skips_check.ServerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/skips_check.ServerResponse'
      summary: Submit answers for a skips task
      tags:
      - Skips
  /submission-status/{submission_id}:
    get:
      description: Retrieves the current status of a submission by its ID, including
        score and hints if available. The score indicates the correctness of the submission
        (e.g., 100 for success, <100 for failure).
      parameters:
      - description: Submission ID
        in: path
        name: submission_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Example response for noises failure with hints" Example({"responseInfo":{"status":"OK"},"isCorrect":"Failed","score":50,"hints":["Check
            string concatenation order","Avoid extra variables"]})
          schema:
            $ref: '#/definitions/submission_status.ServerResponse'
        "400":
          description: Invalid submission ID format
          schema:
            $ref: '#/definitions/submission_status.ServerResponse'
        "404":
          description: Submission not found
          schema:
            $ref: '#/definitions/submission_status.ServerResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/submission_status.ServerResponse'
      summary: Get submission status
      tags:
      - Submissions
  /task-status/{alias}:
    get:
      description: Returns the current status of a task by its alias.
      parameters:
      - description: Task alias
        in: path
        name: alias
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"status":"Done","result":"processed
            code"})
          schema:
            $ref: '#/definitions/task_status.StatusResponse'
        "400":
          description: Alias parameter is missing
          schema:
            $ref: '#/definitions/task_status.StatusResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/task_status.StatusResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/task_status.StatusResponse'
      summary: Get task status
      tags:
      - Skips
  /task/{alias}:
    get:
      description: Retrieves the processed code associated with the given alias from
        the database, including whether the user can edit the task.
      parameters:
      - description: Task alias
        in: path
        name: alias
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"responseInfo":{"status":"OK"},"codeToSolve":"processed
            code","canEdit":true})
          schema:
            $ref: '#/definitions/get_task.Response'
        "400":
          description: Task alias is empty
          schema:
            $ref: '#/definitions/get_task.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/get_task.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/get_task.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/get_task.Response'
      summary: Get task by alias
      tags:
      - Tasks
  /task/{alias}/regenerate:
    patch:
      consumes:
      - application/json
      description: Regenerates the task associated with the given alias, updating
        its code and answers based on the task type (skips or noises). Requires user
        authorization and edit permissions.
      parameters:
      - description: Task alias
        in: path
        name: alias
        required: true
        type: string
      - description: Optional skips number or noise level
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/regenerate.Request'
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"responseInfo":{"status":"OK"},"taskAlias":"abc123"})
          schema:
            $ref: '#/definitions/regenerate.Response'
        "400":
          description: Invalid request or task alias is empty
          schema:
            $ref: '#/definitions/regenerate.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/regenerate.Response'
        "403":
          description: 'Forbidden: user does not have edit permissions'
          schema:
            $ref: '#/definitions/regenerate.Response'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/regenerate.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/regenerate.Response'
      summary: Regenerate task by alias
      tags:
      - Tasks
  /task/{alias}/set-public:
    patch:
      consumes:
      - application/json
      description: Updates the public status of a task identified by its alias. Requires
        user authorization and edit permissions.
      parameters:
      - description: Task alias
        in: path
        name: alias
        required: true
        type: string
      - description: Public status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/edit_task.SetPublicRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Example response" Example({"response_info":{"status":"OK"},"taskAlias":"abc123"})
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
        "400":
          description: Invalid request or task alias is empty
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
        "403":
          description: 'Forbidden: user does not have edit permissions'
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/edit_task.SetPublicResponse'
      summary: Set task public status
      tags:
      - Task
  /task/random:
    get:
      description: Redirects to a random public task with public = true.
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to /api/v1/task/{alias}
          schema:
            type: string
        "404":
          description: No public tasks found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get random public task
      tags:
      - Task
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
