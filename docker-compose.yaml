version: '3.8'

services:
  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/database/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - codular_network
    command: postgres

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - codular_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: codular_backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      ENV: production
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SUPER_USER: ${POSTGRES_USER}
      POSTGRES_SUPER_USER_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST_NAME: ${POSTGRES_HOST_NAME}
      REDIS_HOSTNAME: ${REDIS_HOSTNAME}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./.env:/app/.env:ro
    command: ["/app/wait-for-it.sh", "db:5432", "-t", "60", "--", "/app/wait-for-it.sh", "redis:6379", "-t", "60", "--", "/app/codular-backend"]
    networks:
      - codular_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  codular_network:
    driver: bridge
